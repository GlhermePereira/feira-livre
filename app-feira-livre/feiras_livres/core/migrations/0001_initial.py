# Generated by Django 5.2.2 on 2025-06-05 17:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Feira',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Feira')),
                ('endereco', models.TextField(verbose_name='Endereço Completo')),
                ('bairro', models.CharField(max_length=50)),
                ('cidade', models.CharField(default='São Paulo', max_length=50)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('dias_funcionamento', models.CharField(help_text='Separe os dias por vírgula (ex: seg,qua,sex)', max_length=50)),
                ('horario_abertura', models.TimeField()),
                ('horario_fechamento', models.TimeField()),
                ('ativa', models.BooleanField()),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Feira',
                'verbose_name_plural': 'Feiras',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('telefone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Formato: +5511987654321')], verbose_name='Telefone')),
                ('endereco', models.TextField(blank=True, verbose_name='Endereço')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='core_usuario_set', related_query_name='core_usuario', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_usuario_set', related_query_name='core_usuario', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Barraca',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome da Barraca')),
                ('descricao', models.TextField(blank=True, verbose_name='Descrição')),
                ('feirante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barracas', to=settings.AUTH_USER_MODEL)),
                ('feira', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barracas', to='core.feira')),
            ],
            options={
                'verbose_name': 'Barraca',
                'verbose_name_plural': 'Barracas',
            },
        ),
        migrations.CreateModel(
            name='PresencaBarracaFeira',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('local_mapa', models.CharField(blank=True, max_length=100)),
                ('coordenadas', models.CharField(blank=True, help_text="Formato: 'latitude,longitude'", max_length=50)),
                ('barraca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.barraca')),
                ('feira', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.feira')),
            ],
            options={
                'verbose_name': 'Presença de Barraca',
                'verbose_name_plural': 'Presenças de Barracas',
                'unique_together': {('feira', 'barraca', 'data')},
            },
        ),
    ]
